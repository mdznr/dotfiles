[core]
	excludesfile = ~/.gitignore_global
	quotepath = false
	editor = mvim -f
	ignorecase = false
[user]
	name = Matt Zanchelli
	email = matt@mdznr.com
[url "https://"]
	insteadOf = git://
[difftool "Kaleidoscope"]
	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
[diff]
	tool = Kaleidoscope
[difftool]
	prompt = false
[mergetool "Kaleidoscope"]
	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
	trustexitcode = true
[mergetool "pbxmerge2"]
	cmd = pbxmerge2 \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
[mergetool]
	prompt = false
[merge]
	tool = Kaleidoscope
[push]
	default = current
	followTags = true
[alias]
	l = log
	ll = log --decorate --simplify-merges --date=format:'%a %b %e %_I:%M:%S %p' --pretty=format:'%C(yellow)%h%Creset %C(black bold)%ad%Creset%C(auto)%d %s %C(bold blue)<%an>%Creset'

	d = difftool -M
	ds = difftool -M --cached
	dd = !sh -c 'git difftool -M $(git merge-base $1 $(git branch-name))..$(git branch-name)' -

	p = push

	pb = push -u origin HEAD 

	u = pull

	co = checkout
	ch = checkout
	check = checkout

	cor = !git for-each-ref --sort=-committerdate --format='%(refname:short) (%(committerdate:relative))' refs/heads | fzf --reverse --height 35% --nth 1 | awk '{print $1}' | xargs git checkout

	ci = commit
	com = commit

	s = status
	st = status
	stat = status

	stashes = stash list

	b = branch
	br = branch
	bran = branch

	# Prints the name of the current branch
	branch-name = "!f() { git symbolic-ref HEAD | sed -e 's|^refs/heads/||'; }; f"

	mb = merge-base HEAD master
	mbd = merge-base HEAD develop

	cp = cherry-pick

	last = log -1 HEAD

	patch = format-patch

	who = shortlog -sn

	# Show a nice pretty summary of the most recent commit
	what = show --pretty='"format:%nCommit: %C(yellow)%h%Creset%nParent: %C(yellow)%p%Creset%nAuthor: %an <%Cblue%ae%Creset>%nDate:   %ai%n%n    %B"' --name-status

	# Show a summary of the specified commit hash
	wtf = !sh -c 'git diff --stat $1^1' -

	# Show the diff of the specified commit hash
	wtfd = !sh -c 'git difftool -M $1^1..$1' -
	
	up = !git pull --rebase --prune --autostash $@ && git submodule update --init --recursive

	get = !git fetch --all && git fetch --prune && git pull --all

	# Adds all changes (including untracked files) and creates a commit.
	save = !git add -A && git commit -m 'SAVEPOINT'

	# Adds all changes (only to tracked files) and creates a commit.
	wip = commit -am "WIP"

	# Resets the previous commit, but keeps all the changes from that commit in the working directory.
	undo = reset HEAD~1 --mixed

	# Resets code, but commits to unreachable branch. In case of emergency, `git reflog` and look for “WIPE SAVEPOINT” commit
	wipe = !git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard

	# Cleans up merged branches. Meant to be run from `master` or `develop`. Optional parameter is branch name (defaults to `master`).
	bclean = "!f() { git checkout ${1-master} && git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs git branch -d; }; f"

	# Checks out branch (`master`, if left unspecified), updates it, then cleans up merged branches.
	bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"

	# Checkout a branch name recursively in all submodules.
	# If a submodules doesn’t have a branch with that name, that’s fine. It’ll just stay on the commit (detached).
	# Implemenation note: Using ` || :` after the recursive command to avoid any failed checkout to stop the rest of the submodules from checking out.
	# Implementation note: Using `-` at the end to avoid the arguments originally given to `sco` to be repeated at the end.
	sco = !sh -c '\
		git checkout $1 && \
		git submodule update --recursive && \
		git submodule foreach --recursive \"git checkout $1 || :\" && \
	:' -

	# Forcefully perform a git command in the current repo and recursively in all submodules (regardless of exit status).
	# NOTE: The remainder of the git command (after `git r`) must be in quotes
	# Example: git r "checkout master"
	r = !sh -c '\
		git $@ && \
		git submodule foreach --recursive \"git $@ || :\" && \
	:' -

	# Forcefully perform a command in the current repo and recursively in all submodules (regardless of exit status). See `r` for more details.
	rx = !sh -c '\
		$@ && \
		git submodule foreach --recursive \"$@ || :\" && \
	:' -

	# Prepare to squash all the commits on a branch into one. First parameter is the name of the branch to squash and the second is the name of the branch this is based on.
	squash-branch = !sh -c '\
		git checkout $1 && \
		git reset $(git merge-base $2 $1) && \
	:' -

	# Prepare to squash all the commits on this branch into one. First parameter is the name of the base branch.
	squash-this = !sh -c '\
		git reset $(git merge-base $1 $(git rev-parse --abbrev-ref HEAD)) && \
	:' -

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[submodule]
	recurse = false
